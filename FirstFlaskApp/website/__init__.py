# because we cretaed this file __init__.py inside the website folder it is now considered to be 
# a python package and we can use all of its modules and functions 
# sql alchemy is an ORM object relational mapping tool used when you're not comfortable with 
# databases' queries , it truns code line in the programming language to db queries 
from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from os import path
import os
from flask_login import LoginManager
from flask_mail import Mail, Message


db = SQLAlchemy()
mail = Mail()
DB_NAME = 'mydatabase'
def create_app():
    app = Flask(__name__)
   
    app.config['SECRET_KEY'] ='khawlaiscool'
    app.config['SQLALCHEMY_DATABASE_URI'] = f'mysql+pymysql://root:khawlaghada@127.0.0.1/{DB_NAME}'
    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
    db.init_app(app)
    app.config['MAIL_SERVER'] = 'smtp.gmail.com'
    app.config['MAIL_PORT'] = 587   # this port works with TLS
    app.config['MAIL_USERNAME'] = 'mayakhawla2@gmail.com'
    app.config['MAIL_PASSWORD'] = 'tcqiozjcvfupczal'   # generated by gmail 2 ways verification for python app
    app.config['MAIL_USE_TLS'] = True
    app.config['MAIL_USE_SSL'] = False
    mail.init_app(app)
          
    from .views import views
    from .auth import auth
    from .models import User , Note
     # now we will register this blueprint  (a bunch of routes that start from a specific url_prefix) in the app
    app.register_blueprint(views, url_prefix='/')
    app.register_blueprint(auth, url_prefix='/')
    create_database(app)

    login_manager = LoginManager()
    login_manager.login_view = 'auth.login'  # this tells the user that if not logged in, the user should be 
    # directed to the log in page  
    login_manager.init_app (app)
    @login_manager.user_loader
    def load_user(id):
         return User.query.get(int(id))


    return app

def create_database(app): 
     if not path.exists('website/' + DB_NAME):
          db.create_all(app=app)
          print('database created !')